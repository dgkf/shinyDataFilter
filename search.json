[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 Doug Kelkhoff Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE. shinyDataFilter package includes open source software components. following list components (full copies license agreements used components included ): SortableJS, https://github.com/SortableJS/Sortable","code":""},{"path":"/LICENSE.html","id":"sortablejs-license","dir":"","previous_headings":"","what":"SortableJS license","title":"MIT License","text":"MIT LICENSE Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Doug Kelkhoff. Author, maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Kelkhoff D (2022). shinyDataFilter: agnostic, idiomatic data filter module shiny. R package version 0.0.1.","code":"@Manual{,   title = {shinyDataFilter: agnostic, idiomatic data filter module for shiny},   author = {Doug Kelkhoff},   year = {2022},   note = {R package version 0.0.1}, }"},{"path":"/index.html","id":"shinydatafilter-","dir":"","previous_headings":"","what":"agnostic, idiomatic data filter module for shiny","title":"agnostic, idiomatic data filter module for shiny","text":"data-agnostic, shiny-idiomatic filter module shinyDataFilter Built top Joe Cheng’s excellent R/Pharma 2018 shiny demo experimenting pushing concept hyper-modular shiny components far . addition Joe showed time, shiny module comes drag--drop reordering overlayed visualizations filter variable’s data qualities.","code":""},{"path":[]},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"agnostic, idiomatic data filter module for shiny","text":"","code":"# install.packages(\"devtools\") devtools::install_github(\"dgkf/shinyDataFilter\")"},{"path":"/index.html","id":"example-app","dir":"","previous_headings":"","what":"Example App","title":"agnostic, idiomatic data filter module for shiny","text":", run sample app build filters shinyDataFilter: ’d like inspect code app","code":"library(shiny) app <- system.file(\"examples\", \"basic_app\", \"app.R\", package = \"shinyDataFilter\") shinyAppFile(app) file.edit(app)  # or file.show(app)"},{"path":"/reference/columnSelectInput.html","id":null,"dir":"Reference","previous_headings":"","what":"A selectizeInput customized for data frames with column labels — columnSelectInput","title":"A selectizeInput customized for data frames with column labels — columnSelectInput","text":"selectizeInput customized data frames column labels","code":""},{"path":"/reference/columnSelectInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A selectizeInput customized for data frames with column labels — columnSelectInput","text":"","code":"columnSelectInput(   inputId,   label,   data,   choices = names,   selected = \"\",   ...,   placeholder = \"\",   onInitialize )"},{"path":"/reference/columnSelectInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A selectizeInput customized for data frames with column labels — columnSelectInput","text":"inputId passed selectizeInput label passed selectizeInput data data.frame object fields populated choices list values select , passed selectizeInput. Alternatively, choices may also function used extract choices (possibly filtered) data. Defaults names data. selected default selection ... passed selectizeInput placeholder passed selectizeInput options onInitialize passed selectizeInput options","code":""},{"path":"/reference/columnSelectInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A selectizeInput customized for data frames with column labels — columnSelectInput","text":"selectizeInput dropdown element","code":""},{"path":"/reference/filter_log.html","id":null,"dir":"Reference","previous_headings":"","what":"A logging function that captures the shiny namespace — filter_log","title":"A logging function that captures the shiny namespace — filter_log","text":"logging function captures shiny namespace","code":""},{"path":"/reference/filter_log.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A logging function that captures the shiny namespace — filter_log","text":"","code":"filter_log(..., ns, verbose = TRUE)"},{"path":"/reference/filter_log.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A logging function that captures the shiny namespace — filter_log","text":"... fields logged ns name current active namespace. missing, derived parent environment. verbose whether log written","code":""},{"path":"/reference/filter_log.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A logging function that captures the shiny namespace — filter_log","text":"NULL","code":""},{"path":"/reference/filter_log_ns_style.html","id":null,"dir":"Reference","previous_headings":"","what":"A crayon style derived from a rough hash of the namespace name — filter_log_ns_style","title":"A crayon style derived from a rough hash of the namespace name — filter_log_ns_style","text":"crayon style derived rough hash namespace name","code":""},{"path":"/reference/filter_log_ns_style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A crayon style derived from a rough hash of the namespace name — filter_log_ns_style","text":"","code":"filter_log_ns_style(txt)"},{"path":"/reference/filter_log_ns_style.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A crayon style derived from a rough hash of the namespace name — filter_log_ns_style","text":"txt ns name format","code":""},{"path":"/reference/filter_log_style.html","id":null,"dir":"Reference","previous_headings":"","what":"A crayon style for the filter log — filter_log_style","title":"A crayon style for the filter log — filter_log_style","text":"crayon style filter log","code":""},{"path":"/reference/filter_log_style.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A crayon style for the filter log — filter_log_style","text":"","code":"filter_log_style(...)"},{"path":"/reference/filter_log_style.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A crayon style for the filter log — filter_log_style","text":"... passed crayon crayon object","code":""},{"path":"/reference/getInitializationCode.shinyDataFilter_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Handler for retrieving static code for a shinyDataFilter_df — getInitializationCode.shinyDataFilter_df","title":"Handler for retrieving static code for a shinyDataFilter_df — getInitializationCode.shinyDataFilter_df","text":"function scriptgloss::getInitializationCode dispatch ","code":""},{"path":"/reference/getInitializationCode.shinyDataFilter_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Handler for retrieving static code for a shinyDataFilter_df — getInitializationCode.shinyDataFilter_df","text":"","code":"getInitializationCode.shinyDataFilter_df(obj, name = NULL)"},{"path":"/reference/getInitializationCode.shinyDataFilter_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Handler for retrieving static code for a shinyDataFilter_df — getInitializationCode.shinyDataFilter_df","text":"obj shinyDataFilter_df object name unused","code":""},{"path":"/reference/get_dataFilter_class.html","id":null,"dir":"Reference","previous_headings":"","what":"Return the class used for dispatch to shiny_vector_filter formatted using\npillar — get_dataFilter_class","title":"Return the class used for dispatch to shiny_vector_filter formatted using\npillar — get_dataFilter_class","text":"Return class used dispatch shiny_vector_filter formatted using pillar","code":""},{"path":"/reference/get_dataFilter_class.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return the class used for dispatch to shiny_vector_filter formatted using\npillar — get_dataFilter_class","text":"","code":"get_dataFilter_class(obj)"},{"path":"/reference/get_dataFilter_class.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return the class used for dispatch to shiny_vector_filter formatted using\npillar — get_dataFilter_class","text":"obj object whose class dispatch derived","code":""},{"path":"/reference/get_dataFilter_class.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Return the class used for dispatch to shiny_vector_filter formatted using\npillar — get_dataFilter_class","text":"pillar formatted class name","code":""},{"path":"/reference/nullor.html","id":null,"dir":"Reference","previous_headings":"","what":"Shorthand operator for NULL fallback — nullor","title":"Shorthand operator for NULL fallback — nullor","text":"Shorthand operator NULL fallback","code":""},{"path":"/reference/nullor.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shorthand operator for NULL fallback — nullor","text":"","code":"lhs %||% rhs"},{"path":"/reference/nullor.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shorthand operator for NULL fallback — nullor","text":"lhs lhs null-operation rhs rhs null-operation","code":""},{"path":"/reference/nullor.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shorthand operator for NULL fallback — nullor","text":"","code":"`%||%` <- shinyDataFilter:::`%||%`  NULL %||% 1 #> [1] 1 # [1] 1  1 %||% 2 #> [1] 1 # [1] 1"},{"path":"/reference/proportionSelectInput.html","id":null,"dir":"Reference","previous_headings":"","what":"A selectizeInput customized for unique element select from vector — proportionSelectInput","title":"A selectizeInput customized for unique element select from vector — proportionSelectInput","text":"selectizeInput customized unique element select vector","code":""},{"path":"/reference/proportionSelectInput.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A selectizeInput customized for unique element select from vector — proportionSelectInput","text":"","code":"proportionSelectInput(   inputId,   label,   vec,   selected = \"\",   ...,   placeholder = \"\",   onInitialize,   sort = c(\"count\", \"alpha\", \"order\") )"},{"path":"/reference/proportionSelectInput.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A selectizeInput customized for unique element select from vector — proportionSelectInput","text":"inputId passed selectizeInput label passed selectizeInput vec vector object unique terms sourced selected default selection ... passed selectizeInput placeholder passed selectizeInput options onInitialize passed selectizeInput options sort sort fields dropdown","code":""},{"path":"/reference/proportionSelectInput.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A selectizeInput customized for unique element select from vector — proportionSelectInput","text":"selectizeInput dropdown element","code":""},{"path":"/reference/shiny_data_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Shiny data filter module server function — shiny_data_filter","title":"Shiny data filter module server function — shiny_data_filter","text":"Shiny data filter module server function","code":""},{"path":"/reference/shiny_data_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Shiny data filter module server function — shiny_data_filter","text":"","code":"shiny_data_filter(   input,   output,   session,   data,   choices = names,   verbose = FALSE )"},{"path":"/reference/shiny_data_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Shiny data filter module server function — shiny_data_filter","text":"input requisite shiny module field specifying incoming ui input reactiveValues output requisite shiny module field capturing output shiny data filter ui session requisite shiny module field containing active shiny session data data.frame reactive expression returning data.frame use input filter module choices list values select , passed selectizeInput. Alternatively, choices may also function used extract choices (possibly filtered) data. Defaults names data. verbose logical value indicating whether print log statements console","code":""},{"path":"/reference/shiny_data_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Shiny data filter module server function — shiny_data_filter","text":"reactive expression returns filtered data wrapped   additional class, \"shinyDataFilter_df\". structuer also contains   \"code\" field represents code needed generate filtered   data.","code":""},{"path":[]},{"path":"/reference/shiny_data_filter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Shiny data filter module server function — shiny_data_filter","text":"","code":"if (FALSE) { library(shiny) library(shinyDataFilter)  library(dplyr)  # for data preprocessing and example data  # prep a new data.frame with more diverse data types starwars2 <- starwars %>%   mutate_if(~is.numeric(.) && all(Filter(Negate(is.na), .) %% 1 == 0), as.integer) %>%   mutate_if(~is.character(.) && length(unique(.)) <= 25, as.factor) %>%   mutate(is_droid = species == \"Droid\") %>%   select(name, gender, height, mass, hair_color, eye_color, vehicles, is_droid)  # create some labels to showcase column select input attr(starwars2$name, \"label\")     <- \"name of character\" attr(starwars2$gender, \"label\")   <- \"gender of character\" attr(starwars2$height, \"label\")   <- \"height of character in centimeters\" attr(starwars2$mass, \"label\")     <- \"mass of character in kilograms\" attr(starwars2$is_droid, \"label\") <- \"whether character is a droid\"  ui <- fluidPage(   titlePanel(\"Filter Data Example\"),   fluidRow(     column(8,       verbatimTextOutput(\"data_summary\"),       verbatimTextOutput(\"data_filter_code\")     ),     column(4,       shiny_data_filter_ui(\"data_filter\")     )   ) )  server <- function(input, output, session) {   filtered_data <- callModule(     shiny_data_filter,     \"data_filter\",     data = starwars2,     verbose = TRUE   )    output$data_filter_code <- renderPrint({     cat(gsub(\"%>%\", \"%>% \\n \",       gsub(\"\\\\s{2,}\", \" \",         paste0(           capture.output(attr(filtered_data(), \"code\")),           collapse = \" \"         )       )     ))   })    output$data_summary <- renderPrint({     if (nrow(filtered_data())) show(filtered_data())     else \"No data available\"   }) }  shinyApp(ui = ui, server = server) }"},{"path":"/reference/shiny_data_filter_item.html","id":null,"dir":"Reference","previous_headings":"","what":"The server function for the filter item module of a data filter module panel — shiny_data_filter_item","title":"The server function for the filter item module of a data filter module panel — shiny_data_filter_item","text":"server function filter item module data filter module panel","code":""},{"path":"/reference/shiny_data_filter_item.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The server function for the filter item module of a data filter module panel — shiny_data_filter_item","text":"","code":"shiny_data_filter_item(   input,   output,   session,   data,   column_name = NULL,   choices = names,   verbose = FALSE )"},{"path":"/reference/shiny_data_filter_item.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The server function for the filter item module of a data filter module panel — shiny_data_filter_item","text":"input requisite shiny module field specifying incoming ui input reactiveValues output requisite shiny module field capturing output shiny data filter ui session requisite shiny module field containing active shiny session data reactive expression returning data.frame use input filter item module column_name column name initialize filter item . unspecified NULL, filter item initialized column selection state. choices list values select , passed selectizeInput. Alternatively, choices may also function used extract choices (possibly filtered) data. Defaults names data. verbose logical value indicating whether print log statements console","code":""},{"path":"/reference/shiny_data_filter_item.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The server function for the filter item module of a data filter module panel — shiny_data_filter_item","text":"reactiveValues list three reactive elements;   (1) reactive data frame, (2) code filter vector name   specified data column, (3) flag indicating remove   filter.","code":""},{"path":"/reference/shiny_data_filter_item_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"A single filter item as part of a data filter module panel — shiny_data_filter_item_ui","title":"A single filter item as part of a data filter module panel — shiny_data_filter_item_ui","text":"sub-module contains logic filter item iteself. contains general ui elements button remove filter grip drag--drop. also handles conditional logic showing column selector column name. column selected also embeds another module showing module filtering specified vector data.","code":""},{"path":"/reference/shiny_data_filter_item_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A single filter item as part of a data filter module panel — shiny_data_filter_item_ui","text":"","code":"shiny_data_filter_item_ui(inputId, verbose = FALSE)"},{"path":"/reference/shiny_data_filter_item_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A single filter item as part of a data filter module panel — shiny_data_filter_item_ui","text":"inputId input slot used access value. verbose logical value indicating whether print log statements console","code":""},{"path":"/reference/shiny_data_filter_item_ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A single filter item as part of a data filter module panel — shiny_data_filter_item_ui","text":"shiny wellPanel house filter","code":""},{"path":"/reference/shiny_data_filter_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"User interface function to add a data filter panel — shiny_data_filter_ui","title":"User interface function to add a data filter panel — shiny_data_filter_ui","text":"User interface function add data filter panel","code":""},{"path":"/reference/shiny_data_filter_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"User interface function to add a data filter panel — shiny_data_filter_ui","text":"","code":"shiny_data_filter_ui(inputId)"},{"path":"/reference/shiny_data_filter_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"User interface function to add a data filter panel — shiny_data_filter_ui","text":"inputId input slot used access value.","code":""},{"path":"/reference/shiny_data_filter_ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"User interface function to add a data filter panel — shiny_data_filter_ui","text":"shiny tagList containing filter ui","code":""},{"path":[]},{"path":"/reference/shiny_data_filter_ui.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"User interface function to add a data filter panel — shiny_data_filter_ui","text":"","code":"if (FALSE) { library(shiny) library(shinyDataFilter)  library(dplyr)  # for data preprocessing and example data  # prep a new data.frame with more diverse data types starwars2 <- starwars %>%   mutate_if(~is.numeric(.) && all(Filter(Negate(is.na), .) %% 1 == 0), as.integer) %>%   mutate_if(~is.character(.) && length(unique(.)) <= 25, as.factor) %>%   mutate(is_droid = species == \"Droid\") %>%   select(name, gender, height, mass, hair_color, eye_color, vehicles, is_droid)  # create some labels to showcase column select input attr(starwars2$name, \"label\")     <- \"name of character\" attr(starwars2$gender, \"label\")   <- \"gender of character\" attr(starwars2$height, \"label\")   <- \"height of character in centimeters\" attr(starwars2$mass, \"label\")     <- \"mass of character in kilograms\" attr(starwars2$is_droid, \"label\") <- \"whether character is a droid\"  ui <- fluidPage(   titlePanel(\"Filter Data Example\"),   fluidRow(     column(8,       verbatimTextOutput(\"data_summary\"),       verbatimTextOutput(\"data_filter_code\")     ),     column(4,       shiny_data_filter_ui(\"data_filter\")     )   ) )  server <- function(input, output, session) {   filtered_data <- callModule(     shiny_data_filter,     \"data_filter\",     data = starwars2,     verbose = TRUE   )    output$data_filter_code <- renderPrint({     cat(gsub(\"%>%\", \"%>% \\n \",       gsub(\"\\\\s{2,}\", \" \",         paste0(           capture.output(attr(filtered_data(), \"code\")),           collapse = \" \"         )       )     ))   })    output$data_summary <- renderPrint({     if (nrow(filtered_data())) show(filtered_data())     else \"No data available\"   }) }  shinyApp(ui = ui, server = server) }"},{"path":"/reference/shiny_vector_filter.html","id":null,"dir":"Reference","previous_headings":"","what":"Vector-specific filter module server function — shiny_vector_filter","title":"Vector-specific filter module server function — shiny_vector_filter","text":"shiny_vector_filter family S3 dispatched functions use input data route appropriate ui server functions vector datatype.","code":""},{"path":"/reference/shiny_vector_filter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Vector-specific filter module server function — shiny_vector_filter","text":"","code":"shiny_vector_filter(data, inputId, global = FALSE)"},{"path":"/reference/shiny_vector_filter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Vector-specific filter module server function — shiny_vector_filter","text":"data data object filtered inputId input slot used access value. global logical value indicating whether call issued global methods search. Typically need specified unless explicitly trying avoid global search methods.","code":""},{"path":"/reference/shiny_vector_filter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Vector-specific filter module server function — shiny_vector_filter","text":"shiny server function described details","code":""},{"path":"/reference/shiny_vector_filter.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Vector-specific filter module server function — shiny_vector_filter","text":"shiny_vector_filter functions return shiny module server functions use specified filter. functions follow following template: function conform following specification Arguments input requisite shiny module field specifying incoming ui input reactiveValues output requisite shiny module field capturing output shiny data filter   ui session requisite shiny module field containing active shiny session x reactive expression resolving vector filter filter_na logical value indicating whether filter NA values   x vector verbose logical value indicating whether print log   statements console Value reactiveValues list containing logical vector called \"mask\" can used filter provided vector element \"code\" expression used generate mask.","code":"function(input, output, session, x, filter_na, verbose = FALSE) {     # ... additional code here     reactiveValues(code = TRUE, mask = TRUE)   }"},{"path":"/reference/shiny_vector_filter_factor_few.html","id":null,"dir":"Reference","previous_headings":"","what":"A vector filter for factors with only a few choices — shiny_vector_filter_factor_few","title":"A vector filter for factors with only a few choices — shiny_vector_filter_factor_few","text":"vector filter factors choices","code":""},{"path":"/reference/shiny_vector_filter_factor_few.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A vector filter for factors with only a few choices — shiny_vector_filter_factor_few","text":"","code":"shiny_vector_filter_factor_few(   input,   output,   session,   x = shiny::reactive(factor()),   filter_na = shiny::reactive(TRUE),   verbose = FALSE )"},{"path":"/reference/shiny_vector_filter_factor_few.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A vector filter for factors with only a few choices — shiny_vector_filter_factor_few","text":"input requisite shiny module field specifying incoming ui input reactiveValues output requisite shiny module field capturing output shiny data filter ui session requisite shiny module field containing active shiny session x reactive expression resolving vector filter filter_na logical value indicating whether filter NA values x vector verbose logical value indicating whether print log statements console","code":""},{"path":"/reference/shiny_vector_filter_factor_few.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A vector filter for factors with only a few choices — shiny_vector_filter_factor_few","text":"reactiveValues list containing logical   vector called \"mask\" can used filter provided vector   element \"code\" expression used generate mask.","code":""},{"path":"/reference/shiny_vector_filter_factor_many.html","id":null,"dir":"Reference","previous_headings":"","what":"A vector filter for factors with only a few choices — shiny_vector_filter_factor_many","title":"A vector filter for factors with only a few choices — shiny_vector_filter_factor_many","text":"vector filter factors choices","code":""},{"path":"/reference/shiny_vector_filter_factor_many.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A vector filter for factors with only a few choices — shiny_vector_filter_factor_many","text":"","code":"shiny_vector_filter_factor_many(   input,   output,   session,   x = shiny::reactive(factor()),   filter_na = shiny::reactive(FALSE),   verbose = FALSE )"},{"path":"/reference/shiny_vector_filter_factor_many.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A vector filter for factors with only a few choices — shiny_vector_filter_factor_many","text":"input requisite shiny module field specifying incoming ui input reactiveValues output requisite shiny module field capturing output shiny data filter ui session requisite shiny module field containing active shiny session x reactive expression resolving vector filter filter_na logical value indicating whether filter NA values x vector verbose logical value indicating whether print log statements console","code":""},{"path":"/reference/shiny_vector_filter_factor_many.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A vector filter for factors with only a few choices — shiny_vector_filter_factor_many","text":"reactiveValues list containing logical   vector called \"mask\" can used filter provided vector   element \"code\" expression used generate mask.","code":""},{"path":"/reference/shiny_vector_filter_ui.html","id":null,"dir":"Reference","previous_headings":"","what":"A stub UI for a vector filter module — shiny_vector_filter_ui","title":"A stub UI for a vector filter module — shiny_vector_filter_ui","text":"stub UI assumes dispatched module create needed UI \"ui\" uiOutput target","code":""},{"path":"/reference/shiny_vector_filter_ui.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A stub UI for a vector filter module — shiny_vector_filter_ui","text":"","code":"shiny_vector_filter_ui(data, inputId)"},{"path":"/reference/shiny_vector_filter_ui.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A stub UI for a vector filter module — shiny_vector_filter_ui","text":"data data object filtered inputId input slot used access value.","code":""},{"path":"/reference/shiny_vector_filter_ui.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A stub UI for a vector filter module — shiny_vector_filter_ui","text":"empty link[shiny]{div} link[shiny]{uiOutput} placeholder expecting output \"ui\"","code":""},{"path":"/reference/shinytest_path.html","id":null,"dir":"Reference","previous_headings":"","what":"Helper to debug shinytests so they work interactively as well as during test — shinytest_path","title":"Helper to debug shinytests so they work interactively as well as during test — shinytest_path","text":"Helper debug shinytests work interactively well test","code":""},{"path":"/reference/shinytest_path.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Helper to debug shinytests so they work interactively as well as during test — shinytest_path","text":"","code":"shinytest_path(path)"},{"path":"/reference/shinytest_path.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Helper to debug shinytests so they work interactively as well as during test — shinytest_path","text":"path path within tests/shinytest/ directory","code":""},{"path":"/reference/shinytest_path.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Helper to debug shinytests so they work interactively as well as during test — shinytest_path","text":"path works irrespective code executed","code":""},{"path":"/reference/strip_leading_ws.html","id":null,"dir":"Reference","previous_headings":"","what":"Strip leading white space from a block of text — strip_leading_ws","title":"Strip leading white space from a block of text — strip_leading_ws","text":"Strip leading white space block text","code":""},{"path":"/reference/strip_leading_ws.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Strip leading white space from a block of text — strip_leading_ws","text":"","code":"strip_leading_ws(txt, simplify = TRUE)"},{"path":"/reference/strip_leading_ws.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Strip leading white space from a block of text — strip_leading_ws","text":"txt text strip leading whitespace simplify whether simplify character vector","code":""},{"path":"/reference/strip_leading_ws.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Strip leading white space from a block of text — strip_leading_ws","text":"block text entire columns leading whitespace removed","code":""}]
